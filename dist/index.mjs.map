{"version":3,"sources":["../src/index.ts","../src/QrcodeCanvas.tsx","../src/helpers.ts","../src/rectangleCanvas.ts","../src/QrcodeSVG.tsx","../src/rectanglePath.ts"],"sourcesContent":["import download from 'downloadjs';\r\nimport { useState } from 'react';\r\n\r\nexport { default as QrcodeCanvas } from './QrcodeCanvas';\r\nexport { default as QrcodeSVG } from './QrcodeSVG';\r\n\r\n/**\r\n * React Hook to download Qrcode Type\r\n * @returns [ setQrcode, download, isReady ]\r\n */\r\nexport type UseQrcodeDownload = [\r\n    (QrcodeRef : HTMLCanvasElement | SVGSVGElement) => void,\r\n    (fileName : string) => void,\r\n    boolean\r\n];\r\n\r\n/**\r\n * React Hook to download Qrcode Canvas (PNG) or SVG\r\n * @param [suffix=''] add a suffix to the file name to download\r\n * @returns [ setQrcode, download, isReady ]\r\n */\r\nexport function useQrcodeDownload(suffix : string = '') : UseQrcodeDownload {\r\n    \r\n    const [ qrcode, setQrcode ] = useState<HTMLCanvasElement | SVGSVGElement | null>(null);\r\n    const isCanvas : boolean = qrcode instanceof HTMLCanvasElement;\r\n\r\n    return [\r\n        setQrcode,\r\n        (fileName : string) => { if(qrcode) download(\r\n            isCanvas ? (qrcode as HTMLCanvasElement).toDataURL('image/png') : new Blob([qrcode.outerHTML], {type:\"image/svg+xml;charset=utf-8\"}),\r\n            fileName + suffix + (isCanvas ? '.png' : '.svg'),\r\n            isCanvas ? 'image/png' : 'image/svg+xml'\r\n        ) },\r\n        qrcode !== null\r\n    ];\r\n\r\n}\r\n\r\nexport type {\r\n    QrcodeColor,\r\n    QrcodeColorEffect,\r\n    QrcodeElement,\r\n    QrcodeFormat,\r\n    QrcodeImageSettings,\r\n    QrcodePart,\r\n    QrcodePartOption,\r\n    QrcodeProps,\r\n    QrcodeRadius,\r\n    QrcodeRadiusEdge,\r\n    QrcodeRectangleProps,\r\n    QrcodeStyle,\r\n    QrcodeWrapped\r\n} from './types';\r\n\r\n","import qrcodeGenerator from 'qrcode-generator';\r\nimport React, { ReactNode, useEffect, useRef } from 'react';\r\n\r\nimport canvasRectangle from './rectangleCanvas';\r\n\r\nimport {\r\n  getColor,\r\n  qrCodeImageNormalize,\r\n  qrCodePartNormalize,\r\n  qrCodeStyleRadius\r\n} from './helpers';\r\n\r\nimport type {\r\n  QrcodeColor,\r\n  QrcodeColorEffect,\r\n  QrcodeImageSettings,\r\n  QrcodePartOption,\r\n  QrcodeProps,\r\n  QrcodeRectangleProps,\r\n  QrcodeStyle,\r\n  QrcodeWrapped\r\n} from './types';\r\n\r\n/**\r\n * Qrcode React Component\r\n * @author Guilherme Neves <guilhermeasn@yahoo.com.br>\r\n */\r\nexport function QrcodeCanvas(props : QrcodeProps<'canvas'>) : ReactNode {\r\n\r\n    const canvas : React.RefObject<HTMLCanvasElement> = useRef<HTMLCanvasElement>(null);\r\n\r\n    const space = {\r\n        margin: props.margin ?? 0,\r\n        padding: props.padding ?? 0,\r\n        total: ((props.margin ?? 0) + (props.padding ?? 0)) * 2\r\n    }\r\n\r\n    const variant = qrCodePartNormalize<QrcodeStyle>('standard', props.variant);\r\n    const color = qrCodePartNormalize<QrcodeColor>('#000', props.color);\r\n    const colorEffect = qrCodePartNormalize<QrcodeColorEffect>('none', props.colorEffect);\r\n    const imagem = qrCodeImageNormalize(props.image);\r\n\r\n    const qrcode : QRCode = qrcodeGenerator(props.modules ?? 0, props.level ?? (props.image ? 'H' : 'M'));\r\n    qrcode.addData(props.value ?? '', props.mode);\r\n    qrcode.make();\r\n\r\n    const modules : number = qrcode.getModuleCount();\r\n    const size : number = props.size ?? modules * 10;\r\n\r\n    const moduleSize     : number = size / modules;\r\n    const moduleEyeStart : number = 7;\r\n    const moduleEyeEnd   : number = modules - moduleEyeStart - 1;\r\n\r\n    function addImage(context : CanvasRenderingContext2D, imageSet : QrcodeImageSettings) {\r\n        const image = new Image();\r\n        image.src = imageSet.src;\r\n        image.onload = () => {\r\n            const size = Math.floor(modules * moduleSize / 5);\r\n            const position = size * 2 + space.margin + space.padding;\r\n            if(!imageSet.overlap) canvasRectangle(context, {\r\n                height: imageSet.height ?? size,\r\n                width: imageSet.width ?? size,\r\n                positionX: imageSet.positionX ?? position,\r\n                positionY: imageSet.positionY ?? position,\r\n                fill: props.bgColor ?? '#FFF',\r\n            });\r\n            context.drawImage(\r\n                image,\r\n                imageSet.positionX ?? position,\r\n                imageSet.positionY ?? position,\r\n                imageSet.width ?? size,\r\n                imageSet.height ?? size\r\n            );\r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n\r\n        if(!canvas.current) return;\r\n\r\n        const context = canvas.current.getContext('2d');\r\n        if(!context) return;\r\n\r\n        context.clearRect(0, 0, space.total + size, space.total + size);\r\n\r\n        canvasRectangle(context, {\r\n            height: space.padding * 2 + size,\r\n            width: space.padding * 2 + size,\r\n            positionX: space.margin,\r\n            positionY: space.margin,\r\n            fill: props.bgColor ?? '#FFF',\r\n            radius: props.bgRounded ? 10 : undefined\r\n        });\r\n\r\n        for(let row = 0; row < modules; row++) {\r\n\r\n            for(let col = 0; col < modules; col++) {\r\n\r\n                if(!qrcode.isDark(row, col)) continue;\r\n\r\n                let key : QrcodePartOption = (\r\n                    (col < moduleEyeStart && row < moduleEyeStart) ||\r\n                    (col < moduleEyeStart && row > moduleEyeEnd)   || \r\n                    (col > moduleEyeEnd && row < moduleEyeStart)\r\n                ) ? 'eyes' : 'body';\r\n\r\n                let changer : Partial<QrcodeRectangleProps> = {\r\n                    stroke: key === 'body' && props.divider ? (props.bgColor ?? '#FFF') : null\r\n                };\r\n\r\n                const wrapped : QrcodeWrapped = {\r\n                    row: {\r\n                        before: row > 0 ? qrcode.isDark(row - 1, col) : false,\r\n                        after: row < modules - 1 ? qrcode.isDark(row + 1, col) : false\r\n                    },\r\n                    col: {\r\n                        before: col > 0 ? qrcode.isDark(row, col - 1) : false,\r\n                        after: col < modules - 1 ? qrcode.isDark(row, col + 1) : false\r\n                    }\r\n                };\r\n\r\n                changer.radius = qrCodeStyleRadius(\r\n                    variant[key],\r\n                    moduleSize,\r\n                    modules,\r\n                    wrapped,\r\n                    row,\r\n                    col,\r\n                    key\r\n                );\r\n                \r\n                canvasRectangle(context, {\r\n                    positionX: col * moduleSize + space.margin + space.padding,\r\n                    positionY: row * moduleSize + space.margin + space.padding,\r\n                    height: moduleSize,\r\n                    width: moduleSize,\r\n                    fill: getColor(color[key], colorEffect[key], col, row),\r\n                    ...changer\r\n                });\r\n\r\n            }\r\n\r\n        }\r\n\r\n        if(imagem) addImage(context, imagem);\r\n\r\n        if(typeof props.onReady === 'function') {\r\n            props.onReady(canvas.current);\r\n        }\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [ props ]);\r\n\r\n    return <canvas\r\n        { ...props.internalProps }\r\n        ref={ canvas }\r\n        width={ size + space.total }\r\n        height={ size + space.total }\r\n    >{ props.children }</canvas>;\r\n\r\n}\r\n\r\nexport default QrcodeCanvas;\r\n","import { QrcodeColor, QrcodeColorEffect, QrcodeImageSettings, QrcodePart, QrcodePartOption, QrcodeRadius, QrcodeRadiusEdge, QrcodeStyle, QrcodeWrapped } from \"./types\";\r\n\r\ntype ColorRGB = {\r\n    r : number;\r\n    g : number;\r\n    b : number;\r\n}\r\n\r\ntype ColorLevel = (\r\n    | 'light'\r\n    | 'medium'\r\n    | 'dark'\r\n);\r\n\r\nfunction colorHexToRGB(hex: string) : ColorRGB {\r\n\r\n    hex = hex.replace(/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i, (_, r, g, b) => (\r\n        r + r + g + g + b + b\r\n    ));\r\n\r\n    const result = /([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n\r\n    return result ? {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16)\r\n    } : { r: 0, g: 0, b: 0 };\r\n\r\n}\r\n\r\nfunction colorRGBtoHex({ r, g, b } : ColorRGB) : string {\r\n    return \"#\" + ((1 << 24) | (r << 16) | (g << 8) | b).toString(16).slice(1);\r\n}\r\n\r\nfunction colorGradient(color: string, level: number) : string {\r\n\r\n    const rgb = colorHexToRGB(color);\r\n\r\n    for(let k in rgb) {\r\n        rgb[k as keyof ColorRGB] += level;\r\n        if(rgb[k as keyof ColorRGB] > 255) rgb[k as keyof ColorRGB] = 255;\r\n        if(rgb[k as keyof ColorRGB] < 0) rgb[k as keyof ColorRGB] = 0;\r\n    }\r\n\r\n    return colorRGBtoHex(rgb);\r\n\r\n}\r\n\r\nfunction getShadeColor(colorBase: string) : string {\r\n    const { r, g, b } = colorHexToRGB(colorBase);\r\n    const max = Math.min(r, g, b);\r\n    const random = getRandomInt(0, max);\r\n    return colorRGBtoHex({ r: r - random, g: g - random, b: b - random });\r\n}\r\n\r\nfunction colorLevel(color: string) : ColorLevel {\r\n    const sum : number = Object.values(colorHexToRGB(color)).reduce((t, c) => t + c, 0);\r\n    return sum > 510 ? 'light' : sum > 255 ? 'medium' : 'dark';\r\n}\r\n\r\nfunction getRandomInt(min: number, max: number) : number {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function getRandomColor(colorBase: string) : string {\r\n    const level = colorLevel(colorBase);\r\n    const min : number = level === 'dark' ? 0 : level === 'medium' ? 63 : 127;\r\n    const max : number = level === 'dark' ? 127 : level === 'medium' ? 191 : 255;\r\n    return colorRGBtoHex({ r: getRandomInt(min, max), g: getRandomInt(min, max), b: getRandomInt(min, max) });\r\n}\r\n\r\nexport function qrCodePartNormalize<T>(defaultReturn : T, part : undefined | null | T | QrcodePart<T>) : QrcodePart<T> {\r\n\r\n    return (part\r\n        && typeof part === 'object'\r\n        && 'eyes' in part\r\n        && 'body' in part\r\n    ) ? part : {\r\n        eyes: part ?? defaultReturn,\r\n        body: part ?? defaultReturn\r\n    };\r\n    \r\n}\r\n\r\nexport function qrCodeImageNormalize(imageSet ?: string | QrcodeImageSettings) : QrcodeImageSettings | null {\r\n    if(imageSet && typeof imageSet === 'object') return imageSet;\r\n    if(typeof imageSet === 'string') return { src: imageSet };\r\n    return null;\r\n}\r\n\r\nexport function qrCodeRadiusNormalize(radius?: QrcodeRadius) : Required<QrcodeRadiusEdge> {\r\n    return ( typeof radius === 'number' || !radius ) ? {\r\n        top_left: radius ?? 0, top_right: radius ?? 0,\r\n        bottom_left: radius ?? 0, bottom_right: radius ?? 0\r\n    } : {\r\n        top_left: 0, top_right: 0,\r\n        bottom_left:  0, bottom_right: 0,\r\n        ...radius\r\n    }\r\n}\r\n\r\nexport function qrCodeStyleRadius(\r\n    variant : QrcodeStyle,\r\n    moduleSize : number,\r\n    modules: number,\r\n    wrapped : QrcodeWrapped,\r\n    row: number,\r\n    col: number,\r\n    key: QrcodePartOption\r\n) : QrcodeRadius {\r\n\r\n    const radius = moduleSize / 1.6;\r\n\r\n    switch(variant) {\r\n\r\n        case 'dots': return radius;\r\n\r\n        case 'rounded': return moduleSize / 2;\r\n\r\n        case 'circle': return {\r\n            top_left:     !wrapped.col.before && !wrapped.row.before && wrapped.col.after && wrapped.row.after ? moduleSize * 1.35 : 0,\r\n            top_right:    wrapped.col.before && !wrapped.row.before && !wrapped.col.after && wrapped.row.after ? moduleSize * 1.35 : 0,\r\n            bottom_left:  !wrapped.col.before && wrapped.row.before && wrapped.col.after && !wrapped.row.after ? moduleSize * 1.35 : 0,\r\n            bottom_right: wrapped.col.before && wrapped.row.before && !wrapped.col.after && !wrapped.row.after ? moduleSize * 1.35 : 0\r\n        };\r\n        \r\n        case 'fluid': return {\r\n            top_right:    !wrapped.col.after  && !wrapped.row.before ? radius : 0,\r\n            top_left:     !wrapped.col.before && !wrapped.row.before ? radius : 0,\r\n            bottom_right: !wrapped.col.after  && !wrapped.row.after  ? radius : 0,\r\n            bottom_left:  !wrapped.col.before && !wrapped.row.after  ? radius : 0\r\n        };\r\n\r\n        case 'reverse': return {\r\n            top_right:    wrapped.col.after  && wrapped.row.before ? radius : 0,\r\n            top_left:     wrapped.col.before && wrapped.row.before ? radius : 0,\r\n            bottom_right: wrapped.col.after  && wrapped.row.after  ? radius : 0,\r\n            bottom_left:  wrapped.col.before && wrapped.row.after  ? radius : 0\r\n        };\r\n            \r\n\r\n        case 'morse': return !wrapped.col.before && !wrapped.col.after ? radius : {\r\n            top_left:     !wrapped.col.before ? radius : 0,\r\n            bottom_left:  !wrapped.col.before ? radius : 0,\r\n            top_right:    !wrapped.col.after  ? radius : 0,\r\n            bottom_right: !wrapped.col.after  ? radius : 0\r\n        };\r\n\r\n        \r\n        case 'shower': return !wrapped.row.before && !wrapped.row.after ? radius : {\r\n            top_left:     !wrapped.row.before ? radius : 0,\r\n            top_right:    !wrapped.row.before ? radius : 0,\r\n            bottom_left:  !wrapped.row.after  ? radius : 0,\r\n            bottom_right: !wrapped.row.after  ? radius : 0\r\n        };\r\n\r\n        case 'gravity':\r\n            const half = Math.floor(modules / 2);\r\n            return {\r\n                top_right:    !wrapped.col.after  && !wrapped.row.before && !(row > half && col < half) ? radius : 0,\r\n                top_left:     !wrapped.col.before && !wrapped.row.before && !(row > half && col > half) ? radius : 0,\r\n                bottom_right: !wrapped.col.after  && !wrapped.row.after  && !(row < half && col < half) ? radius : 0,\r\n                bottom_left:  !wrapped.col.before && !wrapped.row.after  && !(row < half && col > half) ? radius : 0\r\n            };\r\n\r\n        case 'italic': return {\r\n            top_right: 0,\r\n            top_left: !wrapped.col.before && !wrapped.row.before ? (key === 'eyes' ? moduleSize * 1.2 : radius) : 0,\r\n            bottom_right: !wrapped.col.after  && !wrapped.row.after ? (key === 'eyes' ? moduleSize * 1.2 : radius) : 0,\r\n            bottom_left: 0\r\n        }\r\n\r\n        case 'inclined': return {\r\n            top_right: !wrapped.col.after  && !wrapped.row.before ? (key === 'eyes' ? moduleSize * 1.2 : radius) : 0,\r\n            top_left: 0,\r\n            bottom_right: 0,\r\n            bottom_left: !wrapped.col.before && !wrapped.row.after ? (key === 'eyes' ? moduleSize * 1.2 : radius) : 0\r\n        }\r\n\r\n        default: return 0;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport function getColor(color : QrcodeColor, effect : QrcodeColorEffect , col: number, row: number) : QrcodeColor {\r\n\r\n    switch(effect) {\r\n\r\n        case 'gradient-dark-vertical': return colorGradient(color, row * -3);\r\n        case 'gradient-dark-horizontal': return colorGradient(color, col * -3);\r\n        case 'gradient-dark-diagonal': return colorGradient(color, (col + row) * -2);\r\n        case 'gradient-light-vertical': return colorGradient(color, row * 3);\r\n        case 'gradient-light-horizontal': return colorGradient(color, col * 3);\r\n        case 'gradient-light-diagonal': return colorGradient(color, (col + row) * 2);\r\n        \r\n        case 'shades': return getShadeColor(color);\r\n        case 'colored': return getRandomColor(color);\r\n\r\n        default: return color;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport async function loadImageAsBase64(src: string): Promise<string> {\r\n    const response = await fetch(src);\r\n    const blob = await response.blob();\r\n    return new Promise((resolve) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => resolve(reader.result as string);\r\n        reader.readAsDataURL(blob);\r\n    });\r\n}\r\n","import { qrCodeRadiusNormalize } from \"./helpers\";\r\nimport type { QrcodeRectangleProps } from \"./types\";\r\n\r\nexport default function rectangleCanvas(context: CanvasRenderingContext2D, props : QrcodeRectangleProps) {\r\n\r\n    const radius = qrCodeRadiusNormalize(props.radius);\r\n    \r\n    context.beginPath();\r\n\r\n    context.moveTo(props.positionX + radius.top_left, props.positionY);\r\n\r\n    context.lineTo(props.positionX + props.width - radius.top_right, props.positionY);\r\n    context.quadraticCurveTo(props.positionX + props.width, props.positionY, props.positionX + props.width, props.positionY + radius.top_right);\r\n\r\n    context.lineTo(props.positionX + props.width, props.positionY + props.height - radius.bottom_right);\r\n    context.quadraticCurveTo(props.positionX + props.width, props.positionY + props.height, props.positionX + props.width - radius.bottom_right, props.positionY + props.height);\r\n\r\n    context.lineTo(props.positionX + radius.bottom_left, props.positionY + props.height);\r\n    context.quadraticCurveTo(props.positionX, props.positionY + props.height, props.positionX, props.positionY + props.height - radius.bottom_left);\r\n\r\n    context.lineTo(props.positionX, props.positionY + radius.top_left);\r\n    context.quadraticCurveTo(props.positionX, props.positionY, props.positionX + radius.top_left, props.positionY);\r\n\r\n    if(props.fill) {\r\n        context.fillStyle = props.fill;\r\n        context.fill();\r\n    }\r\n    \r\n    if(props.stroke) {\r\n        context.strokeStyle = props.stroke;\r\n        context.stroke();\r\n    }\r\n\r\n    context.closePath();\r\n\r\n}","import qrcodeGenerator from 'qrcode-generator';\r\nimport React, { ReactNode, useEffect, useRef } from 'react';\r\n\r\nimport rectanglePath from './rectanglePath';\r\n\r\nimport {\r\n  getColor,\r\n  loadImageAsBase64,\r\n  qrCodeImageNormalize,\r\n  qrCodePartNormalize,\r\n  qrCodeStyleRadius\r\n} from './helpers';\r\n\r\nimport type {\r\n  QrcodeColor,\r\n  QrcodeColorEffect,\r\n  QrcodeImageSettings,\r\n  QrcodePartOption,\r\n  QrcodeProps,\r\n  QrcodeStyle,\r\n  QrcodeWrapped\r\n} from './types';\r\n\r\n/**\r\n * Qrcode React Component\r\n * @author Guilherme Neves <guilhermeasn@yahoo.com.br>\r\n */\r\nexport function QrcodeSvg(props: QrcodeProps<'SVG'>): ReactNode {\r\n\r\n    const SVG : React.RefObject<SVGSVGElement> = useRef<SVGSVGElement>(null);\r\n\r\n    const qrcode : QRCode = qrcodeGenerator(props.modules ?? 0, props.level ?? (props.image ? 'H' : 'M'));\r\n    qrcode.addData(props.value ?? '', props.mode);\r\n    qrcode.make();\r\n\r\n    const modules = qrcode.getModuleCount();\r\n    const size = props.size ?? modules * 10;\r\n    const moduleSize = size / modules;\r\n\r\n    const space = {\r\n        margin: props.margin ?? 0,\r\n        padding: props.padding ?? 0,\r\n        total: ((props.margin ?? 0) + (props.padding ?? 0)) * 2\r\n    };\r\n\r\n    const variant = qrCodePartNormalize<QrcodeStyle>('standard', props.variant);\r\n    const color = qrCodePartNormalize<QrcodeColor>('#000', props.color);\r\n    const colorEffect = qrCodePartNormalize<QrcodeColorEffect>('none', props.colorEffect);\r\n\r\n    const Image = () => {\r\n\r\n        if(!props.image) return <></>;\r\n\r\n        const image = qrCodeImageNormalize(props.image) as QrcodeImageSettings;\r\n        const size = Math.floor(modules * moduleSize / 5);\r\n        const position = size * 2 + space.margin + space.padding;\r\n        \r\n        const [ src, setSrc ] = React.useState<string>();\r\n\r\n        useEffect(() => {\r\n            if(src) return;\r\n            loadImageAsBase64(image.src).then(setSrc);\r\n        }, [ props.image ]);\r\n\r\n        if(!src) return <></>;\r\n\r\n        return <>\r\n\r\n            { image.overlap ? <></> : (\r\n                <rect\r\n                    width={image.width ?? size }\r\n                    height={image.height ?? size }\r\n                    x={ image.positionX ?? position }\r\n                    y={ image.positionY ?? position }\r\n                    fill={ props.bgColor ?? '#FFF' }\r\n                />\r\n            ) }\r\n\r\n            <image\r\n                href={ src }\r\n                width={ image.width ?? size }\r\n                height={ image.height ?? size }\r\n                x={ image.positionX ?? position }\r\n                y={ image.positionY ?? position }\r\n                preserveAspectRatio=\"xMidYMid meet\"\r\n            />\r\n\r\n        </>;\r\n\r\n    }\r\n\r\n    const rects: JSX.Element[] = [];\r\n\r\n    for (let row = 0; row < modules; row++) {\r\n        for (let col = 0; col < modules; col++) {\r\n            if (!qrcode.isDark(row, col)) continue;\r\n\r\n            const key: QrcodePartOption = (\r\n                (col < 7 && row < 7) ||\r\n                (col < 7 && row >= modules - 7) ||\r\n                (col >= modules - 7 && row < 7)\r\n            ) ? 'eyes' : 'body';\r\n\r\n            const x = col * moduleSize + space.margin + space.padding;\r\n            const y = row * moduleSize + space.margin + space.padding;\r\n            const c = getColor(color[key], colorEffect[key], col, row);\r\n\r\n            const wrapped : QrcodeWrapped = {\r\n                row: {\r\n                    before: row > 0 ? qrcode.isDark(row - 1, col) : false,\r\n                    after: row < modules - 1 ? qrcode.isDark(row + 1, col) : false\r\n                },\r\n                col: {\r\n                    before: col > 0 ? qrcode.isDark(row, col - 1) : false,\r\n                    after: col < modules - 1 ? qrcode.isDark(row, col + 1) : false\r\n                }\r\n            };\r\n\r\n            rects.push(\r\n                <path\r\n                    d={ rectanglePath({\r\n                        height: moduleSize,\r\n                        width: moduleSize,\r\n                        positionX: x,\r\n                        positionY: y,\r\n                        radius: qrCodeStyleRadius(\r\n                            variant[key],\r\n                            moduleSize,\r\n                            modules,\r\n                            wrapped,\r\n                            row,\r\n                            col,\r\n                            key\r\n                        )\r\n                    }) }\r\n                    key={ `${row}-${col}` }\r\n                    fill={ c }\r\n                    stroke={ props.divider && key === 'body' ? (props.bgColor ?? '#FFF') : undefined }\r\n                />\r\n            );\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(typeof props.onReady === 'function' && SVG.current) {\r\n            props.onReady(SVG.current);\r\n        }\r\n    }, [ props, SVG ]);\r\n\r\n    return (\r\n        <svg\r\n            { ...props.internalProps }\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            viewBox={`0 0 ${size + space.total} ${size + space.total}`}\r\n            width={size + space.total}\r\n            height={size + space.total}\r\n            ref={ SVG }\r\n        >\r\n            <rect\r\n                x={space.margin}\r\n                y={space.margin}\r\n                width={size + space.padding * 2}\r\n                height={size + space.padding * 2}\r\n                fill={props.bgColor ?? '#FFF'}\r\n                rx={props.bgRounded ? 10 : 0}\r\n            />\r\n            { rects }\r\n            <Image />\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport default QrcodeSvg;\r\n","import { qrCodeRadiusNormalize } from \"./helpers\";\r\nimport type { QrcodeRectangleProps } from \"./types\";\r\n\r\nexport default function rectanglePath(props : QrcodeRectangleProps) {\r\n\r\n    const radius = qrCodeRadiusNormalize(props.radius);\r\n\r\n    return `\r\n        M ${props.positionX + radius.top_left},${props.positionY}\r\n        H ${props.positionX + props.width - radius.top_right}\r\n        A ${radius.top_right},${radius.top_right} 0 0 1 ${props.positionX + props.width},${props.positionY + radius.top_right}\r\n        V ${props.positionY + props.height - radius.bottom_right}\r\n        A ${radius.bottom_right},${radius.bottom_right} 0 0 1 ${props.positionX + props.width - radius.bottom_right},${props.positionY + props.height}\r\n        H ${props.positionX + radius.bottom_left}\r\n        A ${radius.bottom_left},${radius.bottom_left} 0 0 1 ${props.positionX},${props.positionY + props.height - radius.bottom_left}\r\n        V ${props.positionY + radius.top_left}\r\n        A ${radius.top_left},${radius.top_left} 0 0 1 ${props.positionX + radius.top_left},${props.positionY}\r\n        Z\r\n    `.trim().replace(/\\s+/g, ' ');\r\n\r\n}\r\n"],"mappings":"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","names":["_a","_b","_c","_d","_e","_f","_g","_h","size","qrcodeGenerator","React","useEffect","useRef","jsx","useRef","qrcodeGenerator","Image","_a","_b","_c","_d","_e","_f","_g","_h","_i","size","React","useEffect"]}